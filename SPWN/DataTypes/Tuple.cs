namespace SPWN.DataTypes;
using InternalImplementation;
using Base;
/*
// This code is generated by this Javascript generator cuz I'm lazy to copy and paste.
// If you really want more Tuples, you can use this, but you have to work with yourself
// because you'll know what happen withSystem.Tuple and System.ValueTuple so work it out for yourself
// Usage:
//    Put it in your browser console and it should run
//    And then run console.log(Generate(the_start_value,the_end_value))

function inlineFor(start, stop, sep, func)
{
var list = []
    for (let i = start; i <= stop; i++)
list.push(func(i));
return list.join(sep)
}


function Generate(start, stop)
{
if (start > stop) return "";
return `
// Tuple is fake. It's actually a wrapped array.

public class Tuple<${ inlineFor(1, start,", ", (x) => "Value"+x)}> : Array<SPWNValueBase>
    ${inlineFor(1, start,"\n    ", (x) => "where Value"+x+" : SPWNValueBase")}
{
    public Tuple(System.Tuple<${ inlineFor(1, start, ", ", (x) => "Value" + x)}> Tuple) : base(new SPWNValueBase[] { ${ inlineFor(1, start, ", ", (x) => "Tuple.Item" + x) } }) { }
    public Tuple(System.ValueTuple<${ inlineFor(1, start, ", ", (x) => "Value" + x)}> Tuple) : base(new SPWNValueBase[] { ${ inlineFor(1, start, ", ", (x) => "Tuple.Item" + x) } }) { }
    public Tuple(${ inlineFor(1, start, ", ", (x) => "Value" + x + " Value" + x)}) : base(new SPWNValueBase[] { ${ inlineFor(1, start, ", ", (x) => "Value" + x) } }) { }
    public Tuple(SPWNExpr<Tuple<${ inlineFor(1, start, ", ", (x) => "Value" + x)}>> Expr) => ValueAsString = Expr.CreateCode();

    public static implicit operator Tuple<${inlineFor(1, start,", ", (x) => "Value"+x)}> (System.Tuple <${ inlineFor(1, start, ", ", (x) => "Value" + x)}> Tuple) => new(Tuple);
public static implicit operator Tuple<${inlineFor(1, start,", ", (x) => "Value"+x)}> (System.ValueTuple <${ inlineFor(1, start, ", ", (x) => "Value" + x)}> Tuple) => new(Tuple);

    ${ inlineFor(1, start, "\n    ", (x) => "public Value" + x + " Item" + x + " => (Value" + x + ")this[" + (x - 1) + "];")}

public void Deconstruct(${inlineFor(1, start,", ", (x) => "out Value"+x+" Value"+x)})
    {
        ${ inlineFor(1, start, "\n        ", (x) => "Value" + x + " = Item" + x + ";")}
}
}
` +Generate(start + 1, stop)
}

*/



// Tuple is fake. It's actually a wrapped array.

public class Tuple<Value1> : Array<SPWNValueBase>
    where Value1 : SPWNValueBase
{
    public Tuple(System.Tuple<Value1> Tuple) : base(new SPWNValueBase[] { Tuple.Item1 }) { }
    public Tuple(System.ValueTuple<Value1> Tuple) : base(new SPWNValueBase[] { Tuple.Item1 }) { }
    public Tuple(Value1 Value1) : base(new SPWNValueBase[] { Value1 }) { }
    public Tuple(SPWNExpr<Tuple<Value1>> Expr) => ValueAsString = Expr.CreateCode();

    public static implicit operator Tuple<Value1>(System.Tuple<Value1> Tuple) => new(Tuple);
    public static implicit operator Tuple<Value1>(System.ValueTuple<Value1> Tuple) => new(Tuple);

    public Value1 Item1 => (Value1)this[0];

    public void Deconstruct(out Value1 Value1)
    {
        Value1 = Item1;
    }
}

// Tuple is fake. It's actually a wrapped array.

public class Tuple<Value1, Value2> : Array<SPWNValueBase>
    where Value1 : SPWNValueBase
    where Value2 : SPWNValueBase
{
    public Tuple(System.Tuple<Value1, Value2> Tuple) : base(new SPWNValueBase[] { Tuple.Item1, Tuple.Item2 }) { }
    public Tuple(System.ValueTuple<Value1, Value2> Tuple) : base(new SPWNValueBase[] { Tuple.Item1, Tuple.Item2 }) { }
    public Tuple(Value1 Value1, Value2 Value2) : base(new SPWNValueBase[] { Value1, Value2 }) { }
    public Tuple(SPWNExpr<Tuple<Value1, Value2>> Expr) => ValueAsString = Expr.CreateCode();

    public static implicit operator Tuple<Value1, Value2>(System.Tuple<Value1, Value2> Tuple) => new(Tuple);
    public static implicit operator Tuple<Value1, Value2>(System.ValueTuple<Value1, Value2> Tuple) => new(Tuple);

    public Value1 Item1 => (Value1)this[0];
    public Value2 Item2 => (Value2)this[1];

    public void Deconstruct(out Value1 Value1, out Value2 Value2)
    {
        Value1 = Item1;
        Value2 = Item2;
    }
}

// Tuple is fake. It's actually a wrapped array.

public class Tuple<Value1, Value2, Value3> : Array<SPWNValueBase>
    where Value1 : SPWNValueBase
    where Value2 : SPWNValueBase
    where Value3 : SPWNValueBase
{
    public Tuple(System.Tuple<Value1, Value2, Value3> Tuple) : base(new SPWNValueBase[] { Tuple.Item1, Tuple.Item2, Tuple.Item3 }) { }
    public Tuple(System.ValueTuple<Value1, Value2, Value3> Tuple) : base(new SPWNValueBase[] { Tuple.Item1, Tuple.Item2, Tuple.Item3 }) { }
    public Tuple(Value1 Value1, Value2 Value2, Value3 Value3) : base(new SPWNValueBase[] { Value1, Value2, Value3 }) { }
    public Tuple(SPWNExpr<Tuple<Value1, Value2, Value3>> Expr) => ValueAsString = Expr.CreateCode();

    public static implicit operator Tuple<Value1, Value2, Value3>(System.Tuple<Value1, Value2, Value3> Tuple) => new(Tuple);
    public static implicit operator Tuple<Value1, Value2, Value3>(System.ValueTuple<Value1, Value2, Value3> Tuple) => new(Tuple);

    public Value1 Item1 => (Value1)this[0];
    public Value2 Item2 => (Value2)this[1];
    public Value3 Item3 => (Value3)this[2];

    public void Deconstruct(out Value1 Value1, out Value2 Value2, out Value3 Value3)
    {
        Value1 = Item1;
        Value2 = Item2;
        Value3 = Item3;
    }
}

// Tuple is fake. It's actually a wrapped array.

public class Tuple<Value1, Value2, Value3, Value4> : Array<SPWNValueBase>
    where Value1 : SPWNValueBase
    where Value2 : SPWNValueBase
    where Value3 : SPWNValueBase
    where Value4 : SPWNValueBase
{
    public Tuple(System.Tuple<Value1, Value2, Value3, Value4> Tuple) : base(new SPWNValueBase[] { Tuple.Item1, Tuple.Item2, Tuple.Item3, Tuple.Item4 }) { }
    public Tuple(System.ValueTuple<Value1, Value2, Value3, Value4> Tuple) : base(new SPWNValueBase[] { Tuple.Item1, Tuple.Item2, Tuple.Item3, Tuple.Item4 }) { }
    public Tuple(Value1 Value1, Value2 Value2, Value3 Value3, Value4 Value4) : base(new SPWNValueBase[] { Value1, Value2, Value3, Value4 }) { }
    public Tuple(SPWNExpr<Tuple<Value1, Value2, Value3, Value4>> Expr) => ValueAsString = Expr.CreateCode();

    public static implicit operator Tuple<Value1, Value2, Value3, Value4>(System.Tuple<Value1, Value2, Value3, Value4> Tuple) => new(Tuple);
    public static implicit operator Tuple<Value1, Value2, Value3, Value4>(System.ValueTuple<Value1, Value2, Value3, Value4> Tuple) => new(Tuple);

    public Value1 Item1 => (Value1)this[0];
    public Value2 Item2 => (Value2)this[1];
    public Value3 Item3 => (Value3)this[2];
    public Value4 Item4 => (Value4)this[3];

    public void Deconstruct(out Value1 Value1, out Value2 Value2, out Value3 Value3, out Value4 Value4)
    {
        Value1 = Item1;
        Value2 = Item2;
        Value3 = Item3;
        Value4 = Item4;
    }
}

// Tuple is fake. It's actually a wrapped array.

public class Tuple<Value1, Value2, Value3, Value4, Value5> : Array<SPWNValueBase>
    where Value1 : SPWNValueBase
    where Value2 : SPWNValueBase
    where Value3 : SPWNValueBase
    where Value4 : SPWNValueBase
    where Value5 : SPWNValueBase
{
    public Tuple(System.Tuple<Value1, Value2, Value3, Value4, Value5> Tuple) : base(new SPWNValueBase[] { Tuple.Item1, Tuple.Item2, Tuple.Item3, Tuple.Item4, Tuple.Item5 }) { }
    public Tuple(System.ValueTuple<Value1, Value2, Value3, Value4, Value5> Tuple) : base(new SPWNValueBase[] { Tuple.Item1, Tuple.Item2, Tuple.Item3, Tuple.Item4, Tuple.Item5 }) { }
    public Tuple(Value1 Value1, Value2 Value2, Value3 Value3, Value4 Value4, Value5 Value5) : base(new SPWNValueBase[] { Value1, Value2, Value3, Value4, Value5 }) { }
    public Tuple(SPWNExpr<Tuple<Value1, Value2, Value3, Value4, Value5>> Expr) => ValueAsString = Expr.CreateCode();

    public static implicit operator Tuple<Value1, Value2, Value3, Value4, Value5>(System.Tuple<Value1, Value2, Value3, Value4, Value5> Tuple) => new(Tuple);
    public static implicit operator Tuple<Value1, Value2, Value3, Value4, Value5>(System.ValueTuple<Value1, Value2, Value3, Value4, Value5> Tuple) => new(Tuple);

    public Value1 Item1 => (Value1)this[0];
    public Value2 Item2 => (Value2)this[1];
    public Value3 Item3 => (Value3)this[2];
    public Value4 Item4 => (Value4)this[3];
    public Value5 Item5 => (Value5)this[4];

    public void Deconstruct(out Value1 Value1, out Value2 Value2, out Value3 Value3, out Value4 Value4, out Value5 Value5)
    {
        Value1 = Item1;
        Value2 = Item2;
        Value3 = Item3;
        Value4 = Item4;
        Value5 = Item5;
    }
}

// Tuple is fake. It's actually a wrapped array.

public class Tuple<Value1, Value2, Value3, Value4, Value5, Value6> : Array<SPWNValueBase>
    where Value1 : SPWNValueBase
    where Value2 : SPWNValueBase
    where Value3 : SPWNValueBase
    where Value4 : SPWNValueBase
    where Value5 : SPWNValueBase
    where Value6 : SPWNValueBase
{
    public Tuple(System.Tuple<Value1, Value2, Value3, Value4, Value5, Value6> Tuple) : base(new SPWNValueBase[] { Tuple.Item1, Tuple.Item2, Tuple.Item3, Tuple.Item4, Tuple.Item5, Tuple.Item6 }) { }
    public Tuple(System.ValueTuple<Value1, Value2, Value3, Value4, Value5, Value6> Tuple) : base(new SPWNValueBase[] { Tuple.Item1, Tuple.Item2, Tuple.Item3, Tuple.Item4, Tuple.Item5, Tuple.Item6 }) { }
    public Tuple(Value1 Value1, Value2 Value2, Value3 Value3, Value4 Value4, Value5 Value5, Value6 Value6) : base(new SPWNValueBase[] { Value1, Value2, Value3, Value4, Value5, Value6 }) { }
    public Tuple(SPWNExpr<Tuple<Value1, Value2, Value3, Value4, Value5, Value6>> Expr) => ValueAsString = Expr.CreateCode();

    public static implicit operator Tuple<Value1, Value2, Value3, Value4, Value5, Value6>(System.Tuple<Value1, Value2, Value3, Value4, Value5, Value6> Tuple) => new(Tuple);
    public static implicit operator Tuple<Value1, Value2, Value3, Value4, Value5, Value6>(System.ValueTuple<Value1, Value2, Value3, Value4, Value5, Value6> Tuple) => new(Tuple);

    public Value1 Item1 => (Value1)this[0];
    public Value2 Item2 => (Value2)this[1];
    public Value3 Item3 => (Value3)this[2];
    public Value4 Item4 => (Value4)this[3];
    public Value5 Item5 => (Value5)this[4];
    public Value6 Item6 => (Value6)this[5];

    public void Deconstruct(out Value1 Value1, out Value2 Value2, out Value3 Value3, out Value4 Value4, out Value5 Value5, out Value6 Value6)
    {
        Value1 = Item1;
        Value2 = Item2;
        Value3 = Item3;
        Value4 = Item4;
        Value5 = Item5;
        Value6 = Item6;
    }
}

// Tuple is fake. It's actually a wrapped array.

public class Tuple<Value1, Value2, Value3, Value4, Value5, Value6, Value7> : Array<SPWNValueBase>
    where Value1 : SPWNValueBase
    where Value2 : SPWNValueBase
    where Value3 : SPWNValueBase
    where Value4 : SPWNValueBase
    where Value5 : SPWNValueBase
    where Value6 : SPWNValueBase
    where Value7 : SPWNValueBase
{
    public Tuple(System.Tuple<Value1, Value2, Value3, Value4, Value5, Value6, Value7> Tuple) : base(new SPWNValueBase[] { Tuple.Item1, Tuple.Item2, Tuple.Item3, Tuple.Item4, Tuple.Item5, Tuple.Item6, Tuple.Item7 }) { }
    public Tuple(System.ValueTuple<Value1, Value2, Value3, Value4, Value5, Value6, Value7> Tuple) : base(new SPWNValueBase[] { Tuple.Item1, Tuple.Item2, Tuple.Item3, Tuple.Item4, Tuple.Item5, Tuple.Item6, Tuple.Item7 }) { }
    public Tuple(Value1 Value1, Value2 Value2, Value3 Value3, Value4 Value4, Value5 Value5, Value6 Value6, Value7 Value7) : base(new SPWNValueBase[] { Value1, Value2, Value3, Value4, Value5, Value6, Value7 }) { }
    public Tuple(SPWNExpr<Tuple<Value1, Value2, Value3, Value4, Value5, Value6, Value7>> Expr) => ValueAsString = Expr.CreateCode();

    public static implicit operator Tuple<Value1, Value2, Value3, Value4, Value5, Value6, Value7>(System.Tuple<Value1, Value2, Value3, Value4, Value5, Value6, Value7> Tuple) => new(Tuple);
    public static implicit operator Tuple<Value1, Value2, Value3, Value4, Value5, Value6, Value7>(System.ValueTuple<Value1, Value2, Value3, Value4, Value5, Value6, Value7> Tuple) => new(Tuple);

    public Value1 Item1 => (Value1)this[0];
    public Value2 Item2 => (Value2)this[1];
    public Value3 Item3 => (Value3)this[2];
    public Value4 Item4 => (Value4)this[3];
    public Value5 Item5 => (Value5)this[4];
    public Value6 Item6 => (Value6)this[5];
    public Value7 Item7 => (Value7)this[6];

    public void Deconstruct(out Value1 Value1, out Value2 Value2, out Value3 Value3, out Value4 Value4, out Value5 Value5, out Value6 Value6, out Value7 Value7)
    {
        Value1 = Item1;
        Value2 = Item2;
        Value3 = Item3;
        Value4 = Item4;
        Value5 = Item5;
        Value6 = Item6;
        Value7 = Item7;
    }
}
